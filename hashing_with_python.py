# -*- coding: utf-8 -*-
"""Hashing with Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DnYwkzNQkzF9eC_lqKHub-2fmS567_Ei
"""

# Nirmani Jayaprabha Pathiranage
# nirma2015@gmail.com
# +94712233126

### PYTHON AND NETWORK SECURITY BOOTCAMP SHAPEAI PROJECT ###

# Question 01
## Write a program in python to generate MD5 of string data

# import the hashlib module
import hashlib

# initializing the string value
text = "Python and Network Security Bootcamp by ShapeAI"

# encoding the string using encode('utf-8') and then sending to md5()
# encode('utf-8') : Converts the string into bytes to be acceptable by hash function.
hash_object_md5 = hashlib.md5(text.encode('utf-8'))

# printing the equivalent byte value
# digest() : Returns the encoded data in byte format.
print("\nThe byte equivalent of md5 hash is : ", end ="")
print(hash_object_md5.digest())

# printing the equivalent hexadecimal value
# hexdigest() : Returns the encoded data in hexadecimal format.
print("\nThe hexadecimal equivalent of md5 hash is : ", end ="")
print(hash_object_md5.hexdigest())

# Question 02
## Write a program in python to generate hashes of string data using 3 algorithms from hashlib

# get the list of all the algorithms available in the system, including those available through OpenSSl
print(hashlib.algorithms_available)

#  see the algorithms present in the hashlib module
print(hashlib.algorithms_guaranteed)

# initialize using sha224
print('\nExample for SHA224')

# encoding the string using encode('utf-8') and then sending to sha224()
hash_object_sha224 = hashlib.sha224(text.encode('utf-8'))

# printing the equivalent byte value
print("\nThe byte equivalent of sha224 hash is : ", end ="")
print(hash_object_sha224.digest())

# printing the equivalent hexadecimal value
print("\nThe hexadecimal equivalent of sha224 hash is : ", end ="")
print(hash_object_sha224.hexdigest())

# initialize using sha256
print('\nExample for SHA256')

# encoding the string using encode('utf-8') and then sending to sha256()
hash_object_sha256 = hashlib.sha256(text.encode('utf-8'))

# printing the equivalent byte value
print("\nThe byte equivalent of sha256 hash is : ", end ="")
print(hash_object_sha256.digest())

# printing the equivalent hexadecimal value
print("\nThe hexadecimal equivalent of sha256 hash is : ", end ="")
print(hash_object_sha256.hexdigest())

# initialize using sha512
print('\nExample for SHA512')

# encoding the string using encode('utf-8') and then sending to sha512()
hash_object_sha512 = hashlib.sha512(text.encode('utf-8'))

# printing the equivalent byte value
print("\nThe byte equivalent of sha512 hash is : ", end ="")
print(hash_object_sha512.digest())

# printing the equivalent hexadecimal value
print("\nThe hexadecimal equivalent of sha512 hash is : ", end ="")
print(hash_object_sha512.hexdigest())

# Question 03
## Add salting and iterations to your hashes

# import os module
import os

# import binascii module
import binascii

# generating the salt
salt = os.urandom(32)
print("\nGenerated Salt: ", salt)

# salting and iterations with MD5 hash
print('\nExample for MD5 hash with salt and iterations')

hashed_password_md5 = hashlib.pbkdf2_hmac('md5', text.encode('utf-8'), salt, 100)

# printing the equivalent byte value
print("\nThe byte equivalent of md5 hash is : ", end ="")
print(hashed_password_md5)

# printing the equivalent hexadecimal value
print("\nThe hexadecimal equivalent of md5 hash is : ", end ="")
print(binascii.hexlify(hashed_password_md5))

# salting and iterations with SHA224 hash
print('\nExample for SHA224 hash with salt and iterations')

hashed_password_sha224 = hashlib.pbkdf2_hmac('sha224', text.encode('utf-8'), salt, 10000)

# printing the equivalent byte value
print("\nThe byte equivalent of sha224 hash is : ", end ="")
print(hashed_password_sha224)

# printing the equivalent hexadecimal value
print("\nThe hexadecimal equivalent of sha224 hash is : ", end ="")
print(binascii.hexlify(hashed_password_sha224))

# salting and iterations with SHA256 hash
print('\nExample for SHA256 hash with salt and iterations')

hashed_password_sha256 = hashlib.pbkdf2_hmac('sha256', text.encode('utf-8'), salt, 100000)

# printing the equivalent byte value
print("\nThe byte equivalent of sha256 hash is : ", end ="")
print(hashed_password_sha256)

# printing the equivalent hexadecimal value
print("\nThe hexadecimal equivalent of ssh256 hash is : ", end ="")
print(binascii.hexlify(hashed_password_sha256))

# salting and iterations with SHA512 hash
print('\nExample for SHA512 hash with salt and iterations')

hashed_password_sha512 = hashlib.pbkdf2_hmac('sha512', text.encode('utf-8'), salt, 10000)

# printing the equivalent byte value
print("\nThe byte equivalent of sha512 hash is : ", end ="")
print(hashed_password_sha512)

# printing the equivalent hexadecimal value
print("\nThe hexadecimal equivalent of sha512 hash is : ", end ="")
print(binascii.hexlify(hashed_password_sha512))